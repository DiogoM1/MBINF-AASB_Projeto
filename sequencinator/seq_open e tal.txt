myfile = open("lorem.txt", "rt") # open lorem.txt for reading text
contents = myfile.read()         # read the entire file to string
myfile.close()                   # close the file
print(contents)                  # print string contents



# Build array of lines from file, strip newlines

mylines = []                                # Declare an empty list.
with open ('lorem.txt', 'rt') as myfile:    # Open lorem.txt for reading text.
    for myline in myfile:                   # For each line in the file,
        mylines.append(myline.rstrip('\n')) # strip newline and add to list.

# Locate and print all occurences of letter "e"

substr = "e"                  # substring to search for.
for line in mylines:          # string to be searched
  index = 0                   # current index: character being compared
  prev = 0                    # previous index: last character compared
  while index < len(line):    # While index has not exceeded string length,
    index = line.find(substr, index)  # set index to first occurrence of "e"
    if index == -1:           # If nothing was found,
      break                   # exit the while loop.
    print(" " * (index - prev) + "e", end='')  # print spaces from previous
                                               # match, then the substring.
    prev = index + len(substr)       # remember this position for next loop.
    index += len(substr)      # increment the index by the length of substr.
                              # (Repeat until index > line length)
  print('\n' + line);         # Print the original string under the e's



############################################


def ler_seq(FileHandle):
    '''
    s
    '''
    seq = ""
    maiores = 0
    while(maiores<2):
        cursor=FileHandle.tell()
        linha=FileHandle.readline()
        if(linha==""): break
        if linha[0]!='>':
            seq+=linha
        else:
            maiores+=1
    FileHandle.seek(cursor)
    return seq.replace("\n", "")

    
    seq = ""
    with open(FileHandle, 'r') as file:
        for line in file:
            seq.append(line)
    return seq



######################################################3


# open the file
my_file = open("dna.txt")

# read the contents
my_file_contents = my_file.read()
					junção dos dois -->	my_dna = my_file.read().rstrip("\n")
# remove the newline from the end of the file contents
my_dna = my_file_contents.rstrip("\n")

# calculate the length
dna_length = len(my_dna)

# print the output
print("sequence is " + my_dna +  " and length is " + str(dna_length))


###################################################


def orf_find(st0):

    seq_0=""
    for i in range(0,len(st0),3):
        if len(st0[i:i+3])==3:
            seq_0 = seq_0 + st0[i:i+3]+ " "

    ms_1 =[m.start() for m in re.finditer('ATG', seq_0)]
    ms_2 =[m.start() for m in re.finditer('(TAA)|(TAG)|(TGA)', seq_0)]

    def get_next(arr,value):
        for a in arr:
            if a > value:
                return a
        return -1























